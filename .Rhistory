blacknh,
asiannh,
hisppop,
amindnh,
homeownpct,
multracenh, othernh
) %>%
rowwise() %>%
transmute(
bg10 = geog_unit,
ppov185 = pov185rate,
mdhhincnow = medianhhi,
pownhome = homeownpct,
# pwhitenh = whitenh / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = asiannh / poptotal,
phisppop = hisppop / poptotal,
pamindnh = amindnh / poptotal,
pothmultnh = (multracenh + othernh) / poptotal,
pbipoc = 1 - (whitenh / poptotal),
p_0017 = ageunder18 / poptotal,
p_65up = age65up / poptotal,
sens_age = p_0017 + p_65up) %>%
mutate(tr10 = substr(bg10, 1, 11)) %>%
full_join(tract_acs)
bg_acs
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothermultnh))
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh))
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh))
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc)))
## --------------variables of interest
bg_acs <- acs %>%
dplyr::select(geog_unit,
pov185rate,
poptotal,
whitenh,
ageunder18,
age65up,
medianhhi,
blacknh,
asiannh, pacificnh,
hisppop,
amindnh,
homeownpct,
multracenh, othernh
) %>%
rowwise() %>%
transmute(
bg10 = geog_unit,
ppov185 = pov185rate,
mdhhincnow = medianhhi,
pownhome = homeownpct,
# pwhitenh = whitenh / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = (asiannh + pacificnh) / poptotal,
phisppop = hisppop / poptotal,
pamindnh = amindnh / poptotal,
pothmultnh = (multracenh + othernh) / poptotal,
pbipoc = 1 - (whitenh / poptotal),
p_0017 = ageunder18 / poptotal,
p_65up = age65up / poptotal,
sens_age = p_0017 + p_65up) %>%
mutate(tr10 = substr(bg10, 1, 11)) %>%
full_join(tract_acs)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc)))
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check !=1)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check != 1)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check < 1)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check < .99)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check > .99)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check > 1001)
bg_acs %>% rowwise() %>% mutate(check = sum(pblacknh, pasiannh, phisppop, pamindnh, pothmultnh, (1-pbipoc))) %>% filter(check > 1.01)
###################
# download acs dataset
###################
temp <- tempfile()
download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_metc/society_census_acs/xlsx_society_census_acs.zip",
destfile = temp
)
acs <- readxl::read_xlsx(unzip(temp, "CensusACSBlockGroup.xlsx")) %>%
janitor::clean_names()
acs_tractsonly <- readxl::read_xlsx(unzip(temp, "CensusACSTract.xlsx")) %>%
janitor::clean_names()
fs::file_delete("CensusACSTract.xlsx")
fs::file_delete("CensusACSBlockGroup.xlsx")
##------some variables only exist at the tract levels
tract_acs <- acs_tractsonly %>%
dplyr::select(geog_unit,
anydis,
cdenom) %>%
transmute(tr10 = geog_unit,
pd_any = anydis / cdenom)
## --------------variables of interest
bg_acs <- acs %>%
dplyr::select(geog_unit,
pov185rate,
poptotal,
whitenh,
ageunder18,
age65up,
medianhhi,
blacknh,
asiannh, pacificnh,
hisppop,
amindnh,
homeownpct,
multracenh, othernh
) %>%
rowwise() %>%
transmute(
bg10 = geog_unit,
ppov185 = pov185rate,
mdhhincnow = medianhhi,
pownhome = homeownpct,
# pwhitenh = whitenh / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = (asiannh + pacificnh) / poptotal,
phisppop = hisppop / poptotal,
pamindnh = amindnh / poptotal,
pothmultnh = (multracenh + othernh) / poptotal,
pbipoc = 1 - (whitenh / poptotal),
p_0017 = ageunder18 / poptotal,
p_65up = age65up / poptotal,
sens_age = p_0017 + p_65up) %>%
mutate(tr10 = substr(bg10, 1, 11)) %>%
full_join(tract_acs)
###################
# combine data sources
###################
bg_growingshade_data <- bg_acs %>%
# filter(str_detect(bg10, "27003|27019|27037|27053|27123|27139|27163")) %>%
mutate(tr10 = substr(bg10, 1, 11)) %>% #this is the tract id
# full_join(equity_data_raw_bg) %>%
# a <- eva_data_raw_bg %>%
#   mutate(cty = str_sub(bg10, 1, 5)) %>%
#   filter(str_detect(cty, "55"))
# levels(as.factor(a$cty))
# full_join(acs_data_raw)
left_join(equity_data_raw_bg) %>%
left_join(bg_canopy) %>%
left_join(bg_ndvi) %>%
left_join(bg_health2) %>%
mutate(inverse_ndvi_uncultivated = ndvi_uncultivated,
inverse_ndvi_land = ndvi_land,
canopy_percent2 = canopy_percent,
pop_density = poptot_mc / landacres,
housing_density = hutot_mc / landacres) %>%
rename(tract_string = bg10) %>% #and for this project, I need to rename the tract variable
# add_column(avg_temp = sample(100, size = nrow(bg_canopy), replace = TRUE),
# env_cancer = sample(100, size = nrow(bg_canopy), replace = TRUE),
# green_roof = sample(100, size = nrow(bg_canopy), replace = TRUE),
# holc_pred = sample(100, size = nrow(bg_canopy), replace = TRUE),
# luse_green = sample(100, size = nrow(bg_canopy), replace = TRUE),
# phhi_qntl1 = sample(100, size = nrow(bg_canopy), replace = TRUE),
# prim_flood = sample(100, size = nrow(bg_canopy), replace = TRUE),
# pwk_nowork = sample(100, size = nrow(bg_canopy), replace = TRUE),
# tr_ej = sample(100, size = nrow(bg_canopy), replace = TRUE)) %>%
filter(str_detect(tract_string, "27003|27019|27037|27053|27123|27139|27163")) #just do metc region for now
# dplyr::select(-tr10)
# sort(names(eva_data_raw))
# sort(names(bg_growingshade_data))
bg_growingshade_data %>%
ggplot(aes(y = avg_temp,
# x = ndvi_land
# x = ndvi_uncultivated
# x = canopy_percent
)) +
geom_point(aes(x = ndvi_land), col = 'black') #+
# geom_point(aes(x = ndvi_uncultivated), col = "blue")
###################
# add some human-readable metadata
###################
## -------------------------------describe data
#cc (climate change preset) = prim_flood, avg_temp, ndvi
#ej (environmental justice preset) = pbipoc, phhi_qntl1, prim_flood, avg_temp, ndvi
#ph (public health preset)
eva_data_codes <- tribble(~variable, ~name, ~type, ~interpret_high_value, ~cc, ~ej, ~ph, ~cons,
"pop_density", "Population density (persons / acre)", "people",  "high_opportunity", 0, 0, 0,  0,
"housing_density", "Housing unit density (units / acre)", "people",  "high_opportunity", 0, 0, 0,  0,
"ppov185",	"% people with income <185% of the poverty threshold", "dollar", "high_opportunity", 0, 1, 0, 0,
"prim_flood", "% developed acres in primary flood zone", "environment", "high_opportunity", 1, 0, 0, 0,
"pbipoc", "Race, % people of color", "people", "high_opportunity", 0, 1, 0, 0,
"p_0017", "Age, % under age 18", "people",  "high_opportunity", 0, 0, 0, 0,
"p_65up", "Age, % age 65 or older", "people",  "high_opportunity", 0, 0, 0,  0,
"avg_temp", "Temperature on hot summer day", "environment",  "high_opportunity", 1, 0, 1, 0,
# "phhi_qntl1", "% households with annual income less than $35,000 (bottom quintile of households)", "people",  "high_opportunity", 0, 1, 0, 0,
# "green_roof", "Water holding potential of green roofs on commercial bldgs", "environment",  "high_opportunity",
"env_cancer", "Lifetime cancer risk from air toxics", "health", "high_opportunity", 0, 0, 1,  0,
# "luse_notgreen", "% of tract NOT used for green space", "environment", "high_opportunity"
"ndvi_uncultivated", "Greenness, uncultivated land (2021 NDVI)", "environment", "low_opportunity", 1, 0, 1,  0,
"inverse_ndvi_uncultivated", "Greenness, uncultivated land (2021 NDVI) - for conservation", "environment", "high_opportunity", 0, 0, 0, 1,
"ndvi_land", "Greenness, all land (2021 NDVI)", "environment", "low_opportunity", 1, 0, 1,  0,
"inverse_ndvi_land", "Greenness, all land (2021 NDVI) - for conservation", "environment", "high_opportunity", 0, 0, 0, 0,
"tr_ej", "MPCA area of environmental justice concern", "environment", "high_opportunity", 0, 0, 0, 0,
"holc_pred", "% of block group's land acreage redlined", "environment", "high_opportunity", 0, 0, 0, 0,
"canopy_percent", "Tree canopy in 2021 (%)", "environment", "low_opportunity", 1, 0, 1, 0,
"canopy_percent2", "Tree canopy in 2021 (%) - for conservation", "environment", "high_opportunity", 0, 0, 0, 1,
"mdhhincnow", "Median household income", "dollar", "low_opportunity", 0, 0, 0, 0, #, 2015-2019 period (in 2019 dollars)
"sens_age", "Age, % under age 18 or 65+", "people", "high_opportunity", 0,0,1,0,
"pd_any", "Disability, % any disability", "people", "high_opportunity", 0, 0, 0, 0,
"pblacknh", "Race, % Black or African American", "people", "high_opportunity", 0, 0, 0, 0,
"pothmultnh", "Race, % Multiracial or other", "people", "high_opportunity", 0, 0, 0, 0,
"pasiannh", "Race, % Asian or Pacific Islander", "people", "high_opportunity", 0, 0, 0, 0,
"phisppop", "Race, % Hispanic or Latino", "people", "high_opportunity", 0, 0, 0, 0,
"pamindnh", "Race, % Indigenous", "people", "high_opportunity", 0, 0, 0, 0,
"pwk_nowork", "% of unemployed residents", "dollar", "high_opportunity", 0, 0, 0, 0, # age 16-64 who did not work in past 12 months
"pownhome", "% of residents who own their home", "dollar", "high_opportunity", 0,0,0,0,
"MHLTH", "Mental health not good for >=14 days among adults (%)", "health", "high_opportunity", 0,0,0,0,
"PHLTH", "Physical health not good for >=14 days among adults (%)", "health", "high_opportunity", 0,0,0,0,
"COPD", "Chronic obstructive pulmonary disease among adults (%)", "health", "high_opportunity", 0,0,0,0,
"CASTHMA", "Asthma among adults (%)", "health", "high_opportunity", 0,0,0,0
)
###################
# #create final dataset - no spatial data here
# #note: spatial data should be joined after any summarizing is done to save some computation time
###################
# #long data
bg_growingshade_main <- bg_growingshade_data %>%
pivot_longer(names_to = "variable", values_to = "raw_value", -c(tract_string, tr10)) %>% #end the code after this line if you just want the reshaped data
group_by(variable) %>%
mutate(MEAN = mean(raw_value, na.rm = T),
SD = sd(raw_value, na.rm = T),
MIN = min(raw_value, na.rm = T),
MAX = max(raw_value, na.rm = T),
COUNT = as.numeric(sum(!is.na(raw_value))),
z_score = (raw_value - MEAN)/SD) %>%
full_join(eva_data_codes, by = 'variable') %>%
# #we want high opportunity to be a high value, so this reorders those values if needed
# mutate(opportunity_zscore = case_when(interpret_high_value == "high_opportunity" ~ z_score,
#                                       interpret_high_value == "low_opportunity" ~ z_score * (-1),
#                                         TRUE ~ NA_real_)) %>%
#create nominal weights
mutate(weights_nominal = case_when(interpret_high_value == "high_opportunity" ~ (raw_value - MIN) / (MAX - MIN) * 10,
interpret_high_value == "low_opportunity" ~ 10 - (raw_value - MIN) / (MAX - MIN) * 10,
TRUE ~ NA_real_)) %>%
#Weights Standard Score
mutate(weights_scaled = case_when(interpret_high_value == "high_opportunity" ~ pnorm(z_score) * 10,
interpret_high_value == "low_opportunity" ~ (10 - pnorm(z_score) * 10),
TRUE ~ NA_real_)) %>%
#weights rank
mutate(weights_rank = case_when(interpret_high_value == "high_opportunity" ~ min_rank(desc(weights_nominal)) / COUNT * 10,
interpret_high_value == "low_opportunity" ~ min_rank(desc(weights_nominal)) / COUNT * 10,
TRUE ~ NA_real_)) %>%
# #rank
mutate(overall_rank = case_when(interpret_high_value == "high_opportunity" ~ min_rank(desc(as.numeric(weights_nominal))),
interpret_high_value == "low_opportunity" ~ min_rank(desc(as.numeric(weights_nominal))))) %>%
#
#clean
dplyr::select(-MEAN, -SD, -MIN, -MAX)  %>%
full_join(wide_ctu_crosswalk %>% rename(tr10 = GEOID)) %>%
filter(!is.na(name))
########
# save data
########
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
eva_data_codes %>% arrange(type, name)%>% select(type, name)
# ########
# # create metadata
# #########
md1 <- bg_growingshade_main %>%
group_by(variable) %>%
summarise(MEANRAW = mean(raw_value, na.rm = T),
MEANSCALED = mean(weights_scaled, na.rm = T))
acs_metadata <-
acs_tractsonly %>% #use tracts becuase it has info about disability
filter(str_detect(geoid, "27003|27019|27037|27053|27123|27139|27163"),
year == 2019) %>% #just do metc region for now
dplyr::select(geoid, poptotal:pphother) %>%
pivot_longer(names_to = "variable", values_to = "values", -geoid) %>%
group_by(variable) %>%
summarise(SUM = sum(values, na.rm = T)) %>%
pivot_wider(names_from = variable, values_from = SUM) %>%
transmute(rgn = "twin cities",
ppov185 = (povertyn + poverty150 + pov150_185) / povdenom,
pbipoc = (poptotal - whitenh) / poptotal,
pamindnh = (amindnh) / poptotal,
phisppop = hisppop / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = asiannh / poptotal,
pothmultnh = (othernh + multracenh) / poptotal,
pownhome = ownerocc / hutotal,
p_65up = age65up / poptotal,
p_0017 = ageunder18 / poptotal,
sens_age = (age65up + ageunder18) / poptotal,
# pwk_nowork
# mdhhincnow
# prim_flood
# holc_pred
# tr_ej
# ndvi
# ndvi2
# avg_temp
# canopy_percent
# canopy_percent2,
# CASTHMA
# COPD
# env_cancer
# MHLTH
# PHLTH
# pop_density
pd_any = anydis / cdenom) %>%
pivot_longer(names_to = "variable", values_to = "MEANRAW2", -rgn)
md_gee <-
tribble(~rgn, ~variable, ~MEANRAW2,
"twin cities", "canopy_percent", ctu_list_raw$avgcanopy[1],
"twin cities", "canopy_percent2", ctu_list_raw$avgcanopy[1]#,
# "twin cities", "ndvi", ,
# "twin cities", "ndvi2", ,
# "twin cities", "avg_temp", ,
)
metadata <- bg_growingshade_main %>%
dplyr::group_by(type, name, variable, interpret_high_value, cc, ej, ph, cons) %>%
dplyr::count() %>%
dplyr::ungroup() %>%
full_join(md1) %>%
mutate(niceinterp =
case_when(interpret_high_value == "high_opportunity" ~ "Higher",
TRUE ~ "Lower"),
nicer_interp = case_when(niceinterp == "Lower" ~ "Lower values = higher priority",
variable == "inverse_ndvi_uncultivated" ~ "Higher values = higher priority",
variable == "inverse_ndvi_land" ~ "Higher values = higher priority",
variable == "canopy_percent2" ~ "Higher values = higher priority",
TRUE ~ "")) %>%
full_join(acs_metadata %>%
bind_rows(md_gee)) %>%
mutate(MEANRAW = if_else(!is.na(MEANRAW2), MEANRAW2, MEANRAW)) %>%
dplyr::select(-MEANRAW2, -rgn)
usethis::use_data(metadata, overwrite = TRUE)
highest_p <- function(x) {
test <- enquo(x)
bg_growingshade_main %>%
filter(name %in% (metadata %>%
filter(!!test == 1)))
}
highest_p(ph)
highest_p <- function(group_var) {
selectedvars <- metadata %>%
filter(!!enquo(group_var) == 1) %>%
.[,2]
bg_growingshade_main %>%
filter(name %in% selectedvars$name) %>%
group_by(tract_string) %>%
summarise(MEAN = mean(weights_scaled, na.rm = T))
}
priority_summary_1 <-highest_p(ph) %>% rename(`Public health` = MEAN) %>%
full_join(highest_p(cons) %>% rename(Conservation = MEAN)) %>%
full_join(highest_p(ej) %>% rename(`Environmental justice` = MEAN)) %>%
full_join(highest_p(cc) %>% rename(`Climate change` = MEAN)) %>%
pivot_longer(names_to = "preset", values_to = "score", -tract_string)
priority_summary <- priority_summary_1 %>%
group_by(tract_string) %>%
summarise(score = max(score)) %>%
left_join(priority_summary_1) %>%
rename(highest_priority = preset) %>%
rename(GEOID = tract_string)
metadata
metadata %>% data.frame()
mn_bgs_raw <- mn_bgs_1 %>%
right_join(wide_ctu_crosswalk) %>%
full_join(eab_counts(., GEOID)) %>%
mutate(EAB = ifelse(is.na(EAB), 0, EAB)) %>%
full_join(bg_canopy %>% rename(GEOID = bg10)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1%>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = tract_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
library(sf)
mn_bgs_raw <- mn_bgs_1 %>%
right_join(wide_ctu_crosswalk) %>%
full_join(eab_counts(., GEOID)) %>%
mutate(EAB = ifelse(is.na(EAB), 0, EAB)) %>%
full_join(bg_canopy %>% rename(GEOID = bg10)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1%>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = tract_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
# usethis::use_data(mn_bgs, overwrite = TRUE)
mncounties <- tigris::counties(state = "MN") %>%
filter(COUNTYFP %in% c("003", "019", "037", "053", "123", "139", "163"))
metc_region <- mncounties %>% group_by(COUNTYFP) %>% summarise(geometry = sf::st_union(geometry)) %>%
st_simplify(dTolerance = 400)
usethis::use_data(metc_region, overwrite = TRUE)
# nhood_list <- nhood_list %>% st_make_valid() %>% st_simplify(dTolerance = 100) %>% st_as_sf()
ctu_list <- ctu_list_raw %>%
st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(ctu_list, overwrite = TRUE)
nhood_list <- nhood_list_raw %>%
st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(nhood_list, overwrite = TRUE)
redline <- redline %>%
# st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(redline, overwrite = TRUE)
library(tidyverse); library(sf)
# lakes <- river_lake_all %>%
#   filter(SYSTEM %in% c("Lake"),
#          AREA_ACRES > 10) %>% #these rivers are boundaries
#   sf::st_transform(26915) %>%
#   st_union() %>%
#   st_buffer(-10) %>%
#   # smoothr::smooth(method = "ksmooth") %>%
#   sf::st_simplify(dTolerance = 50, preserveTopology = F) #There’s also a parameter preserveTopology which, when set to TRUE, makes sure that polygons are not reduced to lines or even removed, or that inner holes in them are removed during the simplification process.
# temp <- tempfile()
# download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/trans_airports/gpkg_trans_airports.zip", destfile = temp)
# airports <- sf::read_sf(unzip(temp, "trans_airports.gpkg"))  %>%
#   st_buffer(dist = .$RUNWAY_WID) %>%
#   st_union() %>%
#   # ggplot() + geom_sf()
#   # sf::st_simplify(dTolerance = 25, preserveTopology = F) %>%
#   sf::st_transform(4326)
mn_bgs <- mn_bgs_raw %>%
# if I want to remove lakes; I don't love them removed tbh
# st_transform(26915) %>%
# st_erase(lakes) %>%
# st_erase(airports) %>%
sf::st_simplify(dTolerance = 25, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(mn_bgs, overwrite = TRUE)
# leaflet::leaflet() %>%
#   leaflet::addPolygons(data = mn_bgs) %>%
#   leaflet::addPolygons(data = mn_bgs5, color = "red")
# object.size(mn_bgs) / 1e5
# object.size(mn_bgs5) / 1e5
bg_growingshade_main <- bg_growingshade_main %>%
dplyr::select(tract_string, name, weights_scaled, raw_value)
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
eab <- eab %>% dplyr::select(geometry)
usethis::use_data(eab, overwrite = TRUE)
# object.size(eab2) / 1e5
# object.size(eab) / 1e5
# # ggplot() +
# #   geom_sf(data = ctu_list) +
# #   geom_sf(data = ctu_list2, col = "blue", fill = NA)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
