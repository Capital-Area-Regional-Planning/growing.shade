# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
rmarkdown::render("intro.Rmd",
output_format = "github_document", # -----
output_file = "intro.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("stories.Rmd",
output_format = "github_document", # -----
output_file = "stories.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("where.Rmd",
output_format = "github_document", # -----
output_file = "where.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("next.Rmd",
output_format = "github_document", # -----
output_file = "next.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("notes.Rmd",
output_format = "pdf_document", # -----
output_file = "notes.pdf", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
rmarkdown::render("intro.Rmd",
output_format = "github_document", # -----
output_file = "intro.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("stories.Rmd",
output_format = "github_document", # -----
output_file = "stories.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("where.Rmd",
output_format = "github_document", # -----
output_file = "where.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("next.Rmd",
output_format = "github_document", # -----
output_file = "next.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("notes.Rmd",
output_format = "pdf_document", # -----
output_file = "notes.pdf", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
rmarkdown::render("intro.Rmd",
output_format = "github_document", # -----
output_file = "intro.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("stories.Rmd",
output_format = "github_document", # -----
output_file = "stories.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("where.Rmd",
output_format = "github_document", # -----
output_file = "where.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("next.Rmd",
output_format = "github_document", # -----
output_file = "next.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("notes.Rmd",
output_format = "pdf_document", # -----
output_file = "notes.pdf", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module("carbon_calc")
c(1:100)
rep(c(1:100), 2)
rep(c("oak", "maple"))
rep(c("oak", "maple"), 100)
rep(c("oak", "maple"), each = 100)
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2))
libary(tidyverse)
library(tidyverse)
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2))
rep(c(1:20))
rep(c(1:20, 20:30))
rep(c(1:20, 20:30))
rep(c(1:20, seq(20:30)))
seq(20:30)
seq(20:30, by = .5)
seq(20, 30, by = .5)
rep(c(1:20, seq(20, 30, by = .5)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .25)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .2)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .2)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .18)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .175)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .17)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .165)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .162)))
rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)))
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2),
diameter = rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)), 2))
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2),
diameter = rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)), 2)) %>%
mutate(diameter = if_else(species == "oak", diameter/.7, diameter))
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2),
diameter = rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)), 2)) %>%
mutate(diameter = if_else(species == "oak", diameter/.7, diameter)) %>%
mutate(stock = diameter / .5,
sequestration = diameter / 10)
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2),
diameter = rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)), 2)) %>%
mutate(diameter = if_else(species == "oak", diameter/.7, diameter)) %>%
mutate(stock = diameter / .5,
sequestration = diameter / 10) %>%
pivot_longer(names_to = "measurement", values_to = "values", -c("species", "age"))
tibble(species = rep(c("oak", "maple"), each = 100),
age = rep(c(1:100), 2),
diameter = rep(c(1:20, seq(20.5, 30, by = .5), seq(30.5, 40, by = .16)), 2)) %>%
mutate(diameter = if_else(species == "oak", diameter/.7, diameter)) %>%
mutate(stock = diameter / .5,
sequestration = diameter / 10) %>%
pivot_longer(names_to = "measurement", values_to = "values", -c("species", "age")) %>%
ggplot(aes(x = age, y = values, col = measurement)) +
geom_line() +
facet_wrap(~species)
