dplyr::select(-MEAN, -SD, -MIN, -MAX)  %>%
full_join(wide_ctu_crosswalk %>% rename(tr10 = GEOID)) %>%
filter(!is.na(name))
########
# save data
########
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
eva_data_codes %>% arrange(type, name)%>% select(type, name)
# ########
# # create metadata
# #########
md1 <- bg_growingshade_main %>%
group_by(variable) %>%
summarise(MEANRAW = mean(raw_value, na.rm = T),
MEANSCALED = mean(weights_scaled, na.rm = T))
acs_metadata <-
acs_tractsonly %>% #use tracts becuase it has info about disability
filter(str_detect(geoid, "27003|27019|27037|27053|27123|27139|27163"),
year == 2019) %>% #just do metc region for now
dplyr::select(geoid, poptotal:pphother) %>%
pivot_longer(names_to = "variable", values_to = "values", -geoid) %>%
group_by(variable) %>%
summarise(SUM = sum(values, na.rm = T)) %>%
pivot_wider(names_from = variable, values_from = SUM) %>%
transmute(rgn = "twin cities",
ppov185 = (povertyn + poverty150 + pov150_185) / povdenom,
pbipoc = (poptotal - whitenh) / poptotal,
pamindnh = (amindnh) / poptotal,
phisppop = hisppop / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = asiannh / poptotal,
pothmultnh = (othernh + multracenh) / poptotal,
pownhome = ownerocc / hutotal,
p_65up = age65up / poptotal,
p_0017 = ageunder18 / poptotal,
sens_age = (age65up + ageunder18) / poptotal,
# pwk_nowork
# mdhhincnow
# prim_flood
# holc_pred
# tr_ej
# ndvi
# ndvi2
# avg_temp
# canopy_percent
# canopy_percent2,
# CASTHMA
# COPD
# env_cancer
# MHLTH
# PHLTH
# pop_density
pd_any = anydis / cdenom) %>%
pivot_longer(names_to = "variable", values_to = "MEANRAW2", -rgn)
md_gee <-
tribble(~rgn, ~variable, ~MEANRAW2,
"twin cities", "canopy_percent", ctu_list_raw$avgcanopy[1],
"twin cities", "canopy_percent2", ctu_list_raw$avgcanopy[1]#,
# "twin cities", "ndvi", ,
# "twin cities", "ndvi2", ,
# "twin cities", "avg_temp", ,
)
metadata <- bg_growingshade_main %>%
dplyr::group_by(type, name, variable, interpret_high_value, cc, ej, ph, cons) %>%
dplyr::count() %>%
dplyr::ungroup() %>%
full_join(md1) %>%
mutate(niceinterp =
case_when(interpret_high_value == "high_opportunity" ~ "Higher",
TRUE ~ "Lower"),
nicer_interp = case_when(niceinterp == "Lower" ~ "Lower values = higher priority",
variable == "inverse_ndvi_uncultivated" ~ "Higher values = higher priority",
variable == "inverse_ndvi_land" ~ "Higher values = higher priority",
variable == "canopy_percent2" ~ "Higher values = higher priority",
TRUE ~ "")) %>%
full_join(acs_metadata %>%
bind_rows(md_gee)) %>%
mutate(MEANRAW = if_else(!is.na(MEANRAW2), MEANRAW2, MEANRAW)) %>%
dplyr::select(-MEANRAW2, -rgn)
usethis::use_data(metadata, overwrite = TRUE)
highest_p <- function(x) {
test <- enquo(x)
bg_growingshade_main %>%
filter(name %in% (metadata %>%
filter(!!test == 1)))
}
highest_p(ph)
highest_p <- function(group_var) {
selectedvars <- metadata %>%
filter(!!enquo(group_var) == 1) %>%
.[,2]
bg_growingshade_main %>%
filter(name %in% selectedvars$name) %>%
group_by(tract_string) %>%
summarise(MEAN = mean(weights_scaled, na.rm = T))
}
priority_summary_1 <-highest_p(ph) %>% rename(`Public health` = MEAN) %>%
full_join(highest_p(cons) %>% rename(Conservation = MEAN)) %>%
full_join(highest_p(ej) %>% rename(`Environmental justice` = MEAN)) %>%
full_join(highest_p(cc) %>% rename(`Climate change` = MEAN)) %>%
pivot_longer(names_to = "preset", values_to = "score", -tract_string)
priority_summary <- priority_summary_1 %>%
group_by(tract_string) %>%
summarise(score = max(score)) %>%
left_join(priority_summary_1) %>%
rename(highest_priority = preset) %>%
rename(GEOID = tract_string)
metadata
metadata %>% data.frame()
mn_bgs_raw <- mn_bgs_1 %>%
right_join(wide_ctu_crosswalk) %>%
full_join(eab_counts(., GEOID)) %>%
mutate(EAB = ifelse(is.na(EAB), 0, EAB)) %>%
full_join(bg_canopy %>% rename(GEOID = bg10)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1%>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = tract_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
library(sf)
mn_bgs_raw <- mn_bgs_1 %>%
right_join(wide_ctu_crosswalk) %>%
full_join(eab_counts(., GEOID)) %>%
mutate(EAB = ifelse(is.na(EAB), 0, EAB)) %>%
full_join(bg_canopy %>% rename(GEOID = bg10)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1%>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = tract_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
# usethis::use_data(mn_bgs, overwrite = TRUE)
mncounties <- tigris::counties(state = "MN") %>%
filter(COUNTYFP %in% c("003", "019", "037", "053", "123", "139", "163"))
metc_region <- mncounties %>% group_by(COUNTYFP) %>% summarise(geometry = sf::st_union(geometry)) %>%
st_simplify(dTolerance = 400)
usethis::use_data(metc_region, overwrite = TRUE)
# nhood_list <- nhood_list %>% st_make_valid() %>% st_simplify(dTolerance = 100) %>% st_as_sf()
ctu_list <- ctu_list_raw %>%
st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(ctu_list, overwrite = TRUE)
nhood_list <- nhood_list_raw %>%
st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(nhood_list, overwrite = TRUE)
redline <- redline %>%
# st_transform(26915) %>%
sf::st_simplify(dTolerance = 50, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(redline, overwrite = TRUE)
library(tidyverse); library(sf)
# lakes <- river_lake_all %>%
#   filter(SYSTEM %in% c("Lake"),
#          AREA_ACRES > 10) %>% #these rivers are boundaries
#   sf::st_transform(26915) %>%
#   st_union() %>%
#   st_buffer(-10) %>%
#   # smoothr::smooth(method = "ksmooth") %>%
#   sf::st_simplify(dTolerance = 50, preserveTopology = F) #Thereâ€™s also a parameter preserveTopology which, when set to TRUE, makes sure that polygons are not reduced to lines or even removed, or that inner holes in them are removed during the simplification process.
# temp <- tempfile()
# download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/trans_airports/gpkg_trans_airports.zip", destfile = temp)
# airports <- sf::read_sf(unzip(temp, "trans_airports.gpkg"))  %>%
#   st_buffer(dist = .$RUNWAY_WID) %>%
#   st_union() %>%
#   # ggplot() + geom_sf()
#   # sf::st_simplify(dTolerance = 25, preserveTopology = F) %>%
#   sf::st_transform(4326)
mn_bgs <- mn_bgs_raw %>%
# if I want to remove lakes; I don't love them removed tbh
# st_transform(26915) %>%
# st_erase(lakes) %>%
# st_erase(airports) %>%
sf::st_simplify(dTolerance = 25, preserveTopology = T) %>%
sf::st_transform(4326)
usethis::use_data(mn_bgs, overwrite = TRUE)
# leaflet::leaflet() %>%
#   leaflet::addPolygons(data = mn_bgs) %>%
#   leaflet::addPolygons(data = mn_bgs5, color = "red")
# object.size(mn_bgs) / 1e5
# object.size(mn_bgs5) / 1e5
bg_growingshade_main <- bg_growingshade_main %>%
dplyr::select(tract_string, name, weights_scaled, raw_value)
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
eab <- eab %>% dplyr::select(geometry)
usethis::use_data(eab, overwrite = TRUE)
# object.size(eab2) / 1e5
# object.size(eab) / 1e5
# # ggplot() +
# #   geom_sf(data = ctu_list) +
# #   geom_sf(data = ctu_list2, col = "blue", fill = NA)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
remotes::install_github("JohnCoene/waiter")
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
install.packages('ggbeeswarm')
install.packages("ggbeeswarm")
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
devtools::install_github("eclarke/ggbeeswarm")
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
library(ggbeeswarm)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# Set options here
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
