)
rmarkdown::render("inst/app/www/LineplotHelp.Rmd",
output_format = "github_document", # -----
output_file = "LineplotHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("inst/app/www/RankHelp.Rmd",
output_format = "github_document", # -----
output_file = "RankHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("inst/app/www/PriorityHelp.Rmd",
output_format = "github_document", # -----
output_file = "PriorityHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(sf)
library(tidyverse)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
rmarkdown::render("intro.Rmd",
output_format = "github_document", # -----
output_file = "intro.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("notes.Rmd",
output_format = "pdf_document", # -----
output_file = "notes.pdf", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("./R/methods.Rmd",
output_format = "github_document", # -----
output_file = "methods.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("PresetHelp.Rmd", #"inst/app/www/PresetHelp.Rmd",
output_format = "github_document", # -----
output_file = "PresetHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("inst/app/www/LineplotHelp.Rmd",
output_format = "github_document", # -----
output_file = "LineplotHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("inst/app/www/RankHelp.Rmd",
output_format = "github_document", # -----
output_file = "RankHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
rmarkdown::render("inst/app/www/PriorityHelp.Rmd",
output_format = "github_document", # -----
output_file = "PriorityHelp.md", output_dir = "inst/app/www",
params = list(
actor_id = "esch",
data_date = Sys.Date(),
sha = system("git rev-parse --short HEAD",
intern = TRUE
)
)
)
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(tiler)
install.packages('tiler')
library(tiler)
library(tiler)
library(raster)
tile_dir <- file.path(tempdir(), "tiles")
map <- system.file("/Users/escheh/Documents/GitHub/planting.shade/data/tree_raster.tif", package = "tiler")
(r <- raster(map))
plot(r)
map <- system.file("/Users/escheh/Documents/GitHub/planting.shade/data/tree_raster.tif", package = "tiler")
map
tile_dir
tile_dir <- file.path(tempdir(), "tiles")
map <- system.file("/Users/escheh/Documents/GitHub/planting.shade/data/tree_raster.tif", package = "tiler")
(r <- raster(map))
map <- system.file("maps/map_wgs84.tif", package = "tiler")
(r <- raster(map))
plot(r)
?system.file
map <- system.file("./planting.shade/data/tree_raster.tif", package = "tiler")
map
map <- system.file("maps/map_wgs84.tif", package = "tiler")
map
map <- system.file("../data/tree_raster.tif", package = "tiler")
map
map <- system.file("./data/tree_raster.tif", package = "tiler")
map
map <- "./data/tree_raster.tif"
map
map <- system.file("./data/tree_raster.tif", package = "tiler")
map
map <- "./data/tree_raster.tif"
map
(r <- raster(map))
r
plot(r)
tile(map, tile_dir, "0-3")
list.files(tile_dir)
tile(raster("./data/tree_raster.tif"), "/Users/escheh/Documents/GitHub/treeraster/tiles", "0-3")
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- "./data/tree_raster.tif"
(r <- raster(map))
r
# plot(r)
tile(raster("./data/tree_raster.tif"), tile_dir, "0-3")
# plot(r)
tile(map, "/Users/escheh/Documents/GitHub/treeraster/tiles", "0-3")
library(rgdal)
#####
# host tree raster
#####
library(rgdal)
library(tiler)
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
#####
# host tree raster
#####
library(rgdal)
library(tiler)
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
install.packages("rgdal")
#####
# host tree raster
#####
library(rgdal)
library(tiler)
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
install.packages('rgdal')
install.packages("rgdal")
install.packages('tiler')
install.packages("tiler")
library(tiler)
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
install.packages("rgdal", dependencies = TRUE)
install.packages("rgdal", dependencies = TRUE)
library(tiler)
library(raster)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(tiler)
library(raster)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
install.packages('rgdal')
install.packages("rgdal")
library(tiler)
library(raster)
library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(usethis)
edit_r_profile()
mygdals <- get_gdal_installation()
library(tiler)
library(raster)
library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(reticulate)
library(reticulate)
use_python("/usr/local/bin/python")
use_virtualenv("~/myenv")
use_condaenv(condaenv = "metcouncil", conda = "/opt/anaconda3/bin/conda")
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
.library
.Library
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
install.packages("rgdal", dependencies = TRUE)
install.packages("rgdal", dependencies = TRUE)
library(tiler)
library(raster)
# library(rgdal)
tile_dir <- file.path("/Users/escheh/Documents/GitHub/treeraster", "tiles")
map <- system.file("maps/map_albers.tif", package = "tiler")
(r <- raster(map))
tile(map, tile_dir, "0-3")
tiler_options()
tiler_options$python
tiler_options()$python
sessionInfo()
library(leaflet)
tiles <- "https://leonawicz.github.io/tiles/us48lr/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 0, maxZoom = 7), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3)
tiles <- "https://github.com/Metropolitan-Council/treeraster/tree/main/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 0, maxZoom = 7), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3)
leaflet(
options = leafletOptions(minZoom = 7, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3)
leaflet(
options = leafletOptions(minZoom = 7, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
?addTiles
tiles <- "https://github.com/Metropolitan-Council/treeraster/tree/main/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 7, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
# addProviderTiles("Stamen.Toner") %>%
addTiles() %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
# addProviderTiles("Stamen.Toner") %>%
addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
tiles <- "https://github.com/Metropolitan-Council/treeraster/tree/main/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
# addProviderTiles("Stamen.Toner") %>%
addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
tiles
library(leaflet)
tiles <- "https://github.com/Metropolitan-Council/treeraster/tree/main/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 10
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 13
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =1)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 16
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =.5)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 16
)
tiles
tiles <- "https://leonawicz.github.io/tiles/us48lr/tiles/{z}/{x}/{y}.png"
tiles
leaflet(
options = leafletOptions(minZoom = 0, maxZoom = 7), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(-100, 40, 3)
library(leaflet)
tiles <- "https://github.com/Metropolitan-Council/treeraster/tree/main/tiles/{z}/{x}/{y}.png"
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =.5)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 16
)
leaflet(
options = leafletOptions(minZoom = 10, maxZoom = 16), width = "100%") %>%
addProviderTiles(provider = providers$Esri.WorldImagery) %>%
# addTiles() %>%
addTiles(tiles, options = tileOptions(opacity =.5)) %>%
setView(
lat = 44.963,
lng = -93.32,
zoom = 15
)
leaflet(
options = leafletOptions(minZoom = 0, maxZoom = 7), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(lat = 44.963,
lng = -93.32,
zoom = 15
)
leaflet(
options = leafletOptions(minZoom = 0, maxZoom = 16), width = "100%") %>%
addProviderTiles("Stamen.Toner") %>%
addTiles(tiles, options = tileOptions(opacity = 0.8)) %>% setView(lat = 44.963,
lng = -93.32,
zoom = 15
)
